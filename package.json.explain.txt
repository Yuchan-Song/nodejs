{
  "dependencies": {
    "async": "^3.2.4",
    "connect-redis": "^7.0.1",
    "cookie-parser": "^1.4.6",
    "cross-env": "^7.0.3",            // cross-env로 운영 환경별로 스크립트 설정이 가능 ( https://www.npmjs.com/package/cross-env )
    "csurf": "^1.11.0",
    "dotenv": "^16.0.3",
    "ejs": "^3.1.9",
    "express": "^4.18.2",
    "express-session": "^1.17.3",
    "figlet": "^1.6.0",
    "helmet": "^6.1.5",               // 서버의 취약점을 보완해주는 패키지 ( https://www.npmjs.com/package/helmet )
    "hpp": "^0.2.3",                  // 서버의 취약점을 보완해주는 패키지 ( https://www.npmjs.com/package/hpp )
    "jade": "^0.29.0",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "pm2": "^5.3.0",
    "redis": "^4.6.5",
    "sanitize-html": "^2.10.0",
    "winston": "^3.8.2"
  },
  "name": "npm-exercise",
  "version": "1.0.0",
  "description": "npm study",
  "main": "index.js",
  // 실행은 npm run "스크립트명" 으로 터미널에서 실행
  // cross-env NODE_ENV(실행환경)을 설정할 수 있다.
  // 로컬은 nodemon 모듈로 서버를 구동한다.
  // 개발, 운영환경에서는 pm2 모듈을 사용해 서버를 구동(노드 프로세스를 백그라운드로 구동한다.)
  //  > 백그라운드의 노드 프로세스를 확인하려면 터미널에 npx pm2 list 명령어를 사용한다.
  //  > npx pm2 (action명)으로 로그등을 확인할 수 있음 사용할 수 있는 action명에는 log (로그확인), reload all (재시작), kill (서버 종료) 등이 있다.
  //  > pm2모듈은 멀티 프로세스를 지원하지만 프로세스간 메모리를 공유하지 못하기 때문에 세션을 공유할 수 있는 외부 서비스(ex: redis)를 사용해야 한다.
  //  > pm2모듈로 서버를 구동하면서 생성하는 프로세스의 개수를 지정할 수 있다.
  //    예) -i 0 > CPU 코어 개수만큼 구동, -i -1 > CPU 코어 개수보다 한 개 적게 구동
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "local": "cross-env NODE_ENV=local nodemon app.js",                   //
    "dev": "cross-env NODE_ENV=development port=80 pm2 start app.js -i 0",     //
    "prod": "cross-env NODE_ENV=production node app.js"
  },
  "author": "ycsong",
  "license": "ISC",
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}
